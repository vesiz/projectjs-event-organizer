Тестови команди за въвеждане в конзолата за всяка задача:
1) 
2) модифицирани са функции:
   createEvent(x,y,z); - само x- е задължителен параметър и отговаря за име на събитието. y- отговаря за флаг за доспъп (true/false). z- отговаря за входна такса на събитието. y и z не са задължителни. При невъвеждане на двете събитието е разрешено за всички посетители и няма входна такса. Позволено е въвеждане само на флаг за достъп, само на входна такса или и двете, като реда на въвеждане трябва да е име -> достъп -> такса. 
   printEventInfo(x);
   removeEvent(x); - и двете функции приемат само един параметър: уникален идентификатор на събитие (eventId).
   createEvent("New Years Eve", true, 30); - достъп разрешен само за пълнолетни с входна такса 30 лв.
   createEvent("8th of December", 20); - достъп разрешен за всички възрасти, вход 20 лв.
   createEvent("Happy Friday At Megami", true); - без вход, само за пълнолетни клиенти
3) checkAdmissionFee(x); - x- приема стойности за уникален идентификатор на събити (eventId). Функцията се тества чрез извикването на функциите:
   printEventInfo(x); - x- приема стойности за уникален идентификатор на събитие(eventId).
   printAllEvents();
4) за изпълнението на това условие е добавено ново property: wallet към Attendants и са модифицирани функции createAttendant, printAttendantInfo, addAttendantToEvent. 
   createAttendant(x, y, z, a); - x- име на клиент (string), y- пол ("male"/"female"), z- възраст (number >= 0), a- портфейл (number >= 0). Всички параметри са задължителни. При неспазване на формата и броя им се извеждат необходимите съобщения. 
   printAttendantInfo(x); - няма промяна във въвежданите параметри. x- уникален идентификатор за клиент (attendantId).
   addAttendantToEvent(x, y); - няма промяна във въвежданите параметри. x- уникален идентификатор за събитие, y- уникален идентификатор за клиент. Пр:
   createAttendant("Stefan Spasov", "male", 21, 100);
   addAttendantToEvent(10, 2); - няма да се изпълни, клиент с ID: 2 няма достатъчно пари за да плати входа за събитие с ID: 10.
5) за изпълнението на това условие е добавено ново property: VIPStatus към Attendants и са модифицирани функции createAttendant и AddAttendantToEvent. Всеки елемент от VIPStatus e от целочислен тип и се увеличава с едно за всеки клиент, записан за събитие. Когато достигне до 6 клиентът, записван на определено събитие не плаща такса вход и VIPStatus-a му се нулира. Пр:
   Attendant с ID:1 е вече записан за 2 събития
   addAttendantToEvent(9,1);
   addAttendantToEvent(8,1);
   addAttendantToEvent(7,1);
   addAttendantToEvent(6,1);
   VIPStatus-ът на клиент 1 става 6, т.е. при изпълнението на следващата операция той няма да се таксува.
   addAttendantToEvent(10,1);
   







   
   